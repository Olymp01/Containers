import pandas as pd
import streamlit as st
from io import BytesIO
import gspread
from google.oauth2.service_account import Credentials
from google.oauth2 import service_account
from openpyxl import load_workbook
from datetime import datetime
import pytz

scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/drive.file'
]

skey = st.secrets["gcp_service_account"]
credentials = Credentials.from_service_account_info(
    skey,
    scopes=scopes,
)
client = gspread.authorize(credentials)

sheet = client.open('Containers').get_worksheet(0)
python_sheet = sheet.get_all_records()
headers = python_sheet.pop(0)
xd = pd.DataFrame(python_sheet, columns=headers)

st.set_page_config(page_title = '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã')
st.header('–†–∞—Å–ø–µ—á–∞—Ç–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤/–ø—Ä–æ–±–∏—Ä–æ–∫')
lst = []

log_name = st.text_input('–ò–º—è')
log_title = st.text_input('–õ–æ–≥–∏–Ω')
log_pass = st.text_input('–ü–∞—Ä–æ–ª—å') 

#–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–∏—Ä–æ–∫ –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
options = {'–ü—Ä–æ–±–∏—Ä–∫–∞ —Å–æ —Å—Ä–µ–¥–æ–π –ö—ç—Ä–∏ –ë–ª–µ—Ä–∞':'Z01','–ü—Ä–æ–±–∏—Ä–∫–∞ —Å–æ —Å—Ä–µ–¥–æ–π –≠–π–º—Å–∞':'Z02', '–£—Ä–µ–∞–∑–Ω—ã–π —Ç–µ—Å—Ç(–≤—ã–¥—ã—Ö–∞–µ–º—ã–π –≤–æ–∑–¥—É—Ö)':'Z03', '–ü—Ä–æ–±–∏—Ä–∫–∞ —Å –∂–µ–ª—Ç–æ–π –∫—Ä—ã—à–∫–æ–π (–¶–§–î–ê)':'Z04',
          '–ó–µ–ª–µ–Ω–∞—è –∫—Ä—ã—à–∫–∞ –±–µ–∑ –≥–µ–ª—è':'Z05','–ö–æ–Ω–≤–µ—Ä—Ç —Å –≤–∞—Ç–Ω–æ–π –ø–∞–ª–æ—á–∫–æ–π':'Z06','–ë–∞–Ω–æ—á–∫–∞ –¥–ª—è –∫–∞–ª–∞':'Z07','–°—Ç–µ—Ä–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ—á–∏':'Z08',
           '–ù–µ—Å—Ç–µ—Ä–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ—á–∏':'Z09','–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ—á–∏ —Å –∏–≥–ª–æ–π':'Z10','–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª—é–Ω—ã':'Z11','–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–µ—Ä–º—ã':'Z12',
           '–ö–æ—Ä–∏—á–Ω–µ–≤–∞—è –ø—Ä–æ–±–∏—Ä–∫–∞ –¥–ª—è –º–æ—á–∏':'Z13','–ú–∞–∑–æ–∫ –Ω–∞ —Å—Ç–µ–ø–µ–Ω—å —á–∏—Å—Ç–æ—Ç—ã':'Z14','–ú–∞–∑–æ–∫ –æ—Ç–¥. —É—Ä–µ—Ç—Ä—ã':'Z15','–†–ò–§':'Z16','–°–æ—Å–∫–æ–± –≠–ø–ø–µ–Ω–¥–æ—Ä—Ñ –≤–µ–∫—Ç–æ—Ä–±–µ—Å—Ç':'Z17',
           '–°–æ—Å–∫–æ–± –≠–ø–ø–µ–Ω–¥–æ—Ä—Ñ –∞–º–ø–ª–∏—Å–µ–Ω—Å':'Z18','–°–æ—Å–∫–æ–± (—Ü–∏—Ç–æ–ª–æ–≥–∏—è –ü–ê–ü –∏ —à–µ–π–∫–∏ –º–∞—Ç–∫–∏)':'Z19','–°—Ä–µ–∑':'Z20','–°—Ç–µ—Ä–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–∞–∫–ø–æ—Å–µ–≤–∞':'Z21',
           '–¢–µ—Å—Ç –ø–æ–ª–æ—Å–∫–∞(—Ç–µ—Å—Ç –∞–Ω—Ç–∏–≥–µ–Ω)':'Z22','–ö–≤–∞–Ω—Ç–∏—Ñ–µ—Ä–æ–Ω 4 –≤–∞–∫—É—Ç–µ–π–Ω–µ—Ä–∞':'Z23','–ü–µ—Ä–∏–∞–Ω–∞–ª—å–Ω—ã–π —Å–æ—Å–∫–æ–±(—Ä–µ–∫—Ç–∞–ª—å–Ω–æ)':'Z28','–ü—Ä–æ–±–∏—Ä–∫–∞ "Streck" (trisomnia)':'Z29',
           '–°–æ—Å–∫–æ–± –ü–¶–† –Ω–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å':'Z30','–ú–∏–∫–æ–ø–ª–∞–∑–∞':'Z31','–§–∏–ª—å—Ç—Ä-–∫–∞—Ä—Ç–∞':'Z32'
          }
#'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏':'',

# –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
for i in range(len(xd['Login'])):
    if log_title == xd['Login'][i] and log_pass == xd['Password'][i]:
        worksheet_number = xd['Worksheet'][i]
        sheet2 = client.open('Containers').get_worksheet(worksheet_number)
        asd_sheet = sheet2.get_all_records()
        headers = asd_sheet.pop(0)
        q = pd.DataFrame(asd_sheet, columns=headers)
        st.write(q)
        token = xd['Token'][i]
        st.write('–ü—Ä–µ—Ñ–∏–∫—Å: ',token)
        option = st.selectbox('–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', options.keys())
        cont_prefix = options.get(option)   
        st.write(option,':',cont_prefix)
        number = st.number_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–∏—Ä–æ–∫', min_value=0, step=1)
        st.write(number)
        
        coeff = 4
        
        def zapoln(cont_prefix):
            if cont_prefix in ('Z14','Z15','Z16','Z17','Z18'):
                return str('0000000')
            else:
                return str('0000000000')
            
        last = len(q[cont_prefix])-1
        while(pd.isnull(q[cont_prefix][last])==True or q[cont_prefix][last] == ''):
            last = last - 1
            if last < 0:
                last = last + 1 
                q[cont_prefix][last] = cont_prefix + zapoln(cont_prefix)
                coeff = 3
    
        last_pref = int('1'+((str(q[cont_prefix][last]))[3:]))
        for i in range(1, number+1):
            temp = str(last_pref + i)[1:]
            lst.append(cont_prefix + temp)
        df = pd.DataFrame()
        df[option] = lst
        st.write(df)
        
            
        def to_excel(df):
           output = BytesIO()
           writer = pd.ExcelWriter(output, engine='openpyxl')
           df.to_excel(writer, index=False, sheet_name='Sheet1') 
           writer.close()
           processed_data = output.getvalue()
           return processed_data
         
        def insert():
            cell_row = last + coeff
            cell_column = int(cont_prefix[1:])  
            cell = sheet2.cell(cell_row, cell_column)
            cell.value = lst[len(lst)-1]
            sheet2.update_cells([cell])
            sheet3 = client.open('Containers').get_worksheet(worksheet_number)
            asd_sheet = sheet3.get_all_records()
            headers = asd_sheet.pop(0)
            a = pd.DataFrame(asd_sheet, columns=headers)
            st.write(a)
            
        def run_cap():
            cap_button = st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å") 
            if cap_button: 
                insert()
                st.text("–£—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä–µ–Ω–æ")
                # Specify the time zone for Kazakhstan (Almaty Time Zone)
                kazakhstan_timezone = pytz.timezone('Asia/Almaty')
                
                # Get the current UTC time
                utc_now = datetime.utcnow()
                
                # Convert UTC time to Kazakhstan time
                kazakhstan_time = utc_now.astimezone(kazakhstan_timezone)
                
                print("Current date and time in Kazakhstan:", kazakhstan_time)
                #now = datetime.now()
                dt_string = kazakhstan_time.strftime("%d.%m.%Y(%(H+6)-%M-%S)")
                df_xlsx = to_excel(df)
                st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª',
                                                 data = df_xlsx ,
                                                 file_name= dt_string+'_'+option+'_'+log_title+'_'+log_name+'.xlsx')       
        run_cap()   
    
                  
        
        
        
    
